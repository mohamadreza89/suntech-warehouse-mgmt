<?php

//
// File generated by ... on the 2018-12-31T12:54:58+0000
// Please do not edit manually
//

/**
 * Classes and menus for suntech-warehouse-mgmt (version 1.0.0)
 *
 * @author      iTop compiler
 * @license     http://opensource.org/licenses/AGPL-3.0
 */
class FakeTicket extends Ticket

{
	public static

	function Init()
	{
		$aParams = array(
			'category' => 'bizmodel',
			'key_type' => 'autoincrement',
			'name_attcode' => array(
				'ref'
			) ,
			'state_attcode' => '',
			'reconc_keys' => array(
				'ref'
			) ,
			'db_table' => 'fake-tickets',
			'db_key_field' => 'id',
			'db_finalclass_field' => '',
		);
		MetaModel::Init_Params($aParams);
		MetaModel::Init_InheritAttributes();
		MetaModel::Init_SetZListItems('details', array(
			0 => 'ref',
		));
		MetaModel::Init_SetZListItems('standard_search', array(
			0 => 'ref',
		));
		MetaModel::Init_SetZListItems('list', array(
			0 => 'ref',
		));
	}
}

/**
 * Persistent classes for a CMDB
 *
 * @copyright   Copyright (C) 2010-2017 Combodo SARL
 * @license     http://opensource.org/licenses/AGPL-3.0
 */
class ProductCategory extends cmdbAbstractObject

{
	public static

	function Init()
	{
		$aParams = array(
			'category' => 'bizmodel,searchable,structure',
			'key_type' => 'autoincrement',
			'name_attcode' => array(
				'title'
			) ,
			'state_attcode' => '',
			'reconc_keys' => array(
				'title'
			) ,
			'db_table' => 'product_categories',
			'db_key_field' => 'id',
			'db_finalclass_field' => 'finalclass',
		);
		MetaModel::Init_Params($aParams);
		MetaModel::Init_InheritAttributes();
		MetaModel::Init_AddAttribute(new AttributeString("title", array(
			"allowed_values" => null,
			"sql" => 'title',
			"default_value" => '',
			"is_null_allowed" => false,
			"depends_on" => array() ,
			"always_load_in_tables" => false
		)));
		MetaModel::Init_AddAttribute(new AttributeHierarchicalKey("parent_id", array(
			"allowed_values" => new ValueSetObjects("SELECT ProductCategory WHERE id != :this->id") ,
			"sql" => 'parent_id',
			"is_null_allowed" => true,
			"on_target_delete" => DEL_MANUAL,
			"depends_on" => array() ,
			"always_load_in_tables" => false
		)));
		MetaModel::Init_AddAttribute(new AttributeExternalField("parent_title", array(
			"allowed_values" => null,
			"extkey_attcode" => 'parent_id',
			"target_attcode" => 'title',
			"always_load_in_tables" => false
		)));
		MetaModel::Init_AddAttribute(new AttributeEnum("is_active", array(
			"allowed_values" => new ValueSetEnum("1,0") ,
			"display_style" => 'list',
			"sql" => 'is_active',
			"default_value" => '1',
			"is_null_allowed" => true,
			"depends_on" => array() ,
			"always_load_in_tables" => false
		)));
		MetaModel::Init_SetZListItems('details', array(
			0 => 'title',
			1 => 'parent_id',
			2 => 'is_active',
		));
		MetaModel::Init_SetZListItems('standard_search', array(
			0 => 'title',
			1 => 'parent_id',
			2 => 'is_active',
		));
		MetaModel::Init_SetZListItems('list', array(
			0 => 'title',
			1 => 'parent_id',
			2 => 'is_active',
		));
	}
}

/**
 * Persistent classes for a CMDB
 *
 * @copyright   Copyright (C) 2010-2017 Combodo SARL
 * @license     http://opensource.org/licenses/AGPL-3.0
 */
class Product extends cmdbAbstractObject

{
	public static

	function Init()
	{
		$aParams = array(
			'category' => 'bizmodel,searchable,structure',
			'key_type' => 'autoincrement',
			'name_attcode' => array(
				'title'
			) ,
			'state_attcode' => '',
			'reconc_keys' => array(
				'title'
			) ,
			'db_table' => 'products',
			'db_key_field' => 'id',
			'db_finalclass_field' => 'finalclass',
		);
		MetaModel::Init_Params($aParams);
		MetaModel::Init_InheritAttributes();
		MetaModel::Init_AddAttribute(new AttributeString("title", array(
			"allowed_values" => null,
			"sql" => 'title',
			"default_value" => '',
			"is_null_allowed" => false,
			"depends_on" => array() ,
			"always_load_in_tables" => false
		)));
		MetaModel::Init_AddAttribute(new AttributeString("technical_title", array(
			"allowed_values" => null,
			"sql" => 'technical_title',
			"default_value" => '',
			"is_null_allowed" => true,
			"depends_on" => array() ,
			"always_load_in_tables" => false
		)));
		MetaModel::Init_AddAttribute(new AttributeExternalKey("product_category_id", array(
			"targetclass" => 'ProductCategory',
			"allowed_values" => new ValueSetObjects("SELECT ProductCategory") ,
			"sql" => 'product_category_id',
			"is_null_allowed" => true,
			"on_target_delete" => DEL_MANUAL,
			"depends_on" => array() ,
			"display_style" => 'select',
			"always_load_in_tables" => false
		)));
		MetaModel::Init_AddAttribute(new AttributeExternalField("product_category_title", array(
			"allowed_values" => null,
			"extkey_attcode" => 'product_category_id',
			"target_attcode" => 'title',
			"always_load_in_tables" => false
		)));
		MetaModel::Init_AddAttribute(new AttributeEnum("is_active", array(
			"allowed_values" => new ValueSetEnum("1,0") ,
			"display_style" => 'list',
			"sql" => 'is_active',
			"default_value" => '1',
			"is_null_allowed" => true,
			"depends_on" => array() ,
			"always_load_in_tables" => false
		)));
		MetaModel::Init_AddAttribute(new AttributeInteger("order_point", array(
			"allowed_values" => null,
			"sql" => 'order_point',
			"default_value" => '',
			"is_null_allowed" => true,
			"depends_on" => array() ,
			"always_load_in_tables" => false
		)));
		MetaModel::Init_AddAttribute(new AttributeString("physical_device_type", array(
			"allowed_values" => null,
			"sql" => 'physical_device_type',
			"default_value" => '',
			"is_null_allowed" => false,
			"depends_on" => array() ,
			"always_load_in_tables" => false
		)));
		MetaModel::Init_SetZListItems('details', array(
			0 => 'product_category_id',
			1 => 'title',
			2 => 'technical_title',
			3 => 'is_active',
			4 => 'order_point',
		));
		MetaModel::Init_SetZListItems('standard_search', array(
			0 => 'product_category_id',
			1 => 'title',
			2 => 'technical_title',
			3 => 'is_active',
			4 => 'order_point',
		));
		MetaModel::Init_SetZListItems('list', array(
			0 => 'product_category_id',
			1 => 'title',
			2 => 'technical_title',
			3 => 'is_active',
			4 => 'order_point',
		));
	}

	public

	function GetBareProperties(WebPage $oPage, $bEditMode = false, $sPrefix, $aExtraParams = array())
	{
		$aFieldsMap = parent::GetBareProperties($oPage, $bEditMode, $sPrefix, $aExtraParams);
		if ($bEditMode == true)
		{
			$oPage->add('<div class="field_container field_small">');
			$oPage->add('<span style="font-size:12px; font-weight:bold; margin-left:40px;">');
			$oPage->add(Dict::S('Class:Product/Attribute:physical_device_type'));
			$oPage->add('</span>');
			$oPage->add('<select name="physical_device_type">');
			$t = MetaModel::EnumChildClasses('PhysicalDevice');
			foreach($t as $tt)
			{
				if (!MetaModel::IsAbstract($tt))
				{
					if ($this->Get('physical_device_type') == $tt)
					{
						$oPage->add('<option selected>' . $tt . '</option>');
						continue;
					}

					$oPage->add('<option value="' . $tt . '">' . Dict::S('Class:' . $tt) . '</option>');
				}
			}

			$oPage->add('</select>');
			$oPage->add('</div>');
		}

		if ($bEditMode == false)
		{
			$oPage->add('<div class="field_container field_small">');
			$oPage->add('<span style="font-size:12px; font-weight:bold; margin-left:40px;">');
			$oPage->add(Dict::S('Class:Product/Attribute:physical_device_type'));
			$oPage->add('</span>');
			$oPage->add(Dict::S('Class:' . $this->Get('physical_device_type')));
			$oPage->add('</div>');
		}

		return $aFieldsMap;
	}

	public

	function UpdateObjectFromPostedForm($sFormPrefix = '', $aAttList = null, $sTargetState = '')
	{
		$aErrors = parent::UpdateObjectFromPostedForm($sFormPrefix, $aAttList, $sTargetState);
		$physical_device = utils::ReadPostedParam('physical_device_type', '', 'raw_data');
		$this->Set('physical_device_type', $physical_device);
	}
}

/**
 * Persistent classes for a CMDB
 *
 * @copyright   Copyright (C) 2010-2017 Combodo SARL
 * @license     http://opensource.org/licenses/AGPL-3.0
 */
class Inventory extends cmdbAbstractObject

{
	public static

	function Init()
	{
		$aParams = array(
			'category' => 'bizmodel,searchable,structure',
			'key_type' => 'autoincrement',
			'name_attcode' => array(
				'title'
			) ,
			'state_attcode' => '',
			'reconc_keys' => array(
				'title'
			) ,
			'db_table' => 'inventory',
			'db_key_field' => 'id',
			'db_finalclass_field' => 'finalclass',
		);
		MetaModel::Init_Params($aParams);
		MetaModel::Init_InheritAttributes();
		MetaModel::Init_AddAttribute(new AttributeString("title", array(
			"allowed_values" => null,
			"sql" => 'title',
			"default_value" => '',
			"is_null_allowed" => false,
			"depends_on" => array() ,
			"always_load_in_tables" => false
		)));
		MetaModel::Init_AddAttribute(new AttributeInteger("width", array(
			"allowed_values" => null,
			"sql" => 'width',
			"default_value" => '',
			"is_null_allowed" => true,
			"depends_on" => array() ,
			"always_load_in_tables" => false
		)));
		MetaModel::Init_AddAttribute(new AttributeInteger("height", array(
			"allowed_values" => null,
			"sql" => 'height',
			"default_value" => '',
			"is_null_allowed" => true,
			"depends_on" => array() ,
			"always_load_in_tables" => false
		)));
		MetaModel::Init_AddAttribute(new AttributeInteger("depth", array(
			"allowed_values" => null,
			"sql" => 'depth',
			"default_value" => '',
			"is_null_allowed" => true,
			"depends_on" => array() ,
			"always_load_in_tables" => false
		)));
		MetaModel::Init_SetZListItems('details', array(
			0 => 'title',
			1 => 'width',
			2 => 'height',
			3 => 'depth',
		));
		MetaModel::Init_SetZListItems('standard_search', array(
			0 => 'title',
			1 => 'width',
			2 => 'height',
			3 => 'depth',
		));
		MetaModel::Init_SetZListItems('list', array(
			0 => 'title',
			1 => 'width',
			2 => 'height',
			3 => 'depth',
		));
	}
}

/**
 * Persistent classes for a CMDB
 *
 * @copyright   Copyright (C) 2010-2017 Combodo SARL
 * @license     http://opensource.org/licenses/AGPL-3.0
 */
class InventoryDetail extends cmdbAbstractObject

{
	public static

	function Init()
	{
		$aParams = array(
			'category' => 'bizmodel,searchable,structure',
			'key_type' => 'autoincrement',
			'name_attcode' => array(
				'title'
			) ,
			'state_attcode' => '',
			'reconc_keys' => array(
				'title'
			) ,
			'db_table' => 'inventory_details',
			'db_key_field' => 'id',
			'db_finalclass_field' => 'finalclass',
		);
		MetaModel::Init_Params($aParams);
		MetaModel::Init_InheritAttributes();
		MetaModel::Init_AddAttribute(new AttributeExternalKey("inventory_id", array(
			"targetclass" => 'Inventory',
			"allowed_values" => new ValueSetObjects("SELECT Inventory") ,
			"sql" => 'inventory_id',
			"is_null_allowed" => false,
			"on_target_delete" => DEL_MANUAL,
			"depends_on" => array() ,
			"display_style" => 'select',
			"always_load_in_tables" => false
		)));
		MetaModel::Init_AddAttribute(new AttributeExternalField("inventory_title", array(
			"allowed_values" => null,
			"extkey_attcode" => 'inventory_id',
			"target_attcode" => 'title',
			"always_load_in_tables" => false
		)));
		MetaModel::Init_AddAttribute(new AttributeString("title", array(
			"allowed_values" => null,
			"sql" => 'title',
			"default_value" => '',
			"is_null_allowed" => false,
			"depends_on" => array() ,
			"always_load_in_tables" => false
		)));
		MetaModel::Init_AddAttribute(new AttributeInteger("row", array(
			"allowed_values" => null,
			"sql" => 'row',
			"default_value" => '',
			"is_null_allowed" => true,
			"depends_on" => array() ,
			"always_load_in_tables" => false
		)));
		MetaModel::Init_AddAttribute(new AttributeString("shelf", array(
			"allowed_values" => null,
			"sql" => 'shelf',
			"default_value" => '',
			"is_null_allowed" => true,
			"depends_on" => array() ,
			"always_load_in_tables" => false
		)));
		MetaModel::Init_SetZListItems('details', array(
			0 => 'title',
			1 => 'inventory_id',
			2 => 'row',
			3 => 'shelf',
		));
		MetaModel::Init_SetZListItems('standard_search', array(
			0 => 'title',
			1 => 'inventory_id',
			2 => 'row',
			3 => 'shelf',
		));
		MetaModel::Init_SetZListItems('list', array(
			0 => 'title',
			1 => 'inventory_id',
			2 => 'row',
			3 => 'shelf',
		));
	}
}

/**
 * Persistent classes for a CMDB
 *
 * @copyright   Copyright (C) 2010-2017 Combodo SARL
 * @license     http://opensource.org/licenses/AGPL-3.0
 */
abstract class FunctionalDocument extends cmdbAbstractObject

{
	public static

	function Init()
	{
		$aParams = array(
			'category' => 'bizmodel,searchable,structure',
			'key_type' => 'autoincrement',
			'name_attcode' => array(
				'ref'
			) ,
			'state_attcode' => '',
			'reconc_keys' => array(
				'ref'
			) ,
			'db_table' => 'functional_documents',
			'db_key_field' => 'id',
			'db_finalclass_field' => 'finalclass',
		);
		MetaModel::Init_Params($aParams);
		MetaModel::Init_InheritAttributes();
		MetaModel::Init_AddAttribute(new AttributeString("ref", array(
			"allowed_values" => null,
			"sql" => 'ref',
			"default_value" => '',
			"is_null_allowed" => true,
			"depends_on" => array() ,
			"always_load_in_tables" => false
		)));
		MetaModel::Init_AddAttribute(new AttributeDateTime("created_at", array(
			"allowed_values" => null,
			"sql" => 'created_at',
			"default_value" => '',
			"is_null_allowed" => true,
			"depends_on" => array() ,
			"always_load_in_tables" => true
		)));
		MetaModel::Init_AddAttribute(new AttributeExternalKey("product_category_id", array(
			"targetclass" => 'ProductCategory',
			"allowed_values" => new ValueSetObjects("SELECT ProductCategory") ,
			"sql" => 'product_category_id',
			"is_null_allowed" => false,
			"on_target_delete" => DEL_MANUAL,
			"depends_on" => array() ,
			"display_style" => 'select',
			"always_load_in_tables" => false
		)));
		MetaModel::Init_AddAttribute(new AttributeExternalField("product_category_title", array(
			"allowed_values" => null,
			"extkey_attcode" => 'product_category_id',
			"target_attcode" => 'title',
			"always_load_in_tables" => false
		)));
		MetaModel::Init_AddAttribute(new AttributeExternalKey("product_id", array(
			"targetclass" => 'Product',
			"allowed_values" => new ValueSetObjects("SELECT Product WHERE product_category_id = :this->product_category_id") ,
			"sql" => 'product_id',
			"is_null_allowed" => false,
			"on_target_delete" => DEL_AUTO,
			"depends_on" => array(
				'product_category_id'
			) ,
			"display_style" => 'select',
			"always_load_in_tables" => false
		)));
		MetaModel::Init_AddAttribute(new AttributeExternalField("product_title", array(
			"allowed_values" => null,
			"extkey_attcode" => 'product_id',
			"target_attcode" => 'title',
			"always_load_in_tables" => false
		)));
		MetaModel::Init_AddAttribute(new AttributeExternalField("product_technical_title", array(
			"allowed_values" => null,
			"extkey_attcode" => 'product_id',
			"target_attcode" => 'technical_title',
			"always_load_in_tables" => false
		)));
		MetaModel::Init_AddAttribute(new AttributeExternalField("physical_device_type", array(
			"allowed_values" => null,
			"extkey_attcode" => 'product_id',
			"target_attcode" => 'physical_device_type',
			"always_load_in_tables" => false
		)));
		MetaModel::Init_AddAttribute(new AttributeInteger("balance", array(
			"allowed_values" => null,
			"sql" => 'balance',
			"default_value" => '',
			"is_null_allowed" => true,
			"depends_on" => array() ,
			"always_load_in_tables" => false
		)));
		MetaModel::Init_SetZListItems('details', array(
			0 => 'ref',
		));
		MetaModel::Init_SetZListItems('standard_search', array(
			0 => 'ref',
		));
		MetaModel::Init_SetZListItems('list', array(
			0 => 'ref',
		));
	}

	protected
	function OnInsert()
	{
		$this->Set('created_at', time());
		$iNextId = MetaModel::GetNextKey(get_class($this));
		if ($this->Get('ref') == '')
		{
			$this->Set('ref', 'FD-' . sprintf('%06d', $iNextId));
		}

		parent::OnInsert();
	}

	public

	function CheckToDelete(&$oDeletionPlan)
	{
		$iKey = $this->Get('id');
		$iProductID = $this->Get('product_id');
		$oFilter = DBObjectSearch::FromOQL('SELECT FunctionalDocument WHERE product_id=' . $iProductID);
		$oFilter->AllowAllData();
		$oSet = new DBObjectSet($oFilter);
		$iLastKey = 0;
		while ($oObject = $oSet->Fetch())
		{
			if ($iLastKey < $oObject->Get('id'))
			{
				$iLastKey = $oObject->Get('id');
			}
		}

		if ($iKey != $iLastKey)
		{
			$oDeletionPlan->AddToDelete($this, null);
			$oDeletionPlan->SetDeletionIssues($this, array(
				'Deletion is not allowed because the current record is not the last one'
			) , true);
			$oDeletionPlan->ComputeResults();
			return false;
		}

		return parent::CheckToDelete($oDeletionPlan);
	}

	public

	function onDelete()
	{
	}
}

/**
 * Persistent classes for a CMDB
 *
 * @copyright   Copyright (C) 2010-2017 Combodo SARL
 * @license     http://opensource.org/licenses/AGPL-3.0
 */
class WarehouseDocument extends FunctionalDocument

{
	public static

	function Init()
	{
		$aParams = array(
			'category' => 'bizmodel,searchable,structure',
			'key_type' => 'autoincrement',
			'name_attcode' => array(
				'ref'
			) ,
			'state_attcode' => '',
			'reconc_keys' => array(
				'ref'
			) ,
			'db_table' => 'warehouse_document',
			'db_key_field' => 'id',
			'db_finalclass_field' => 'finalclass',
		);
		MetaModel::Init_Params($aParams);
		MetaModel::Init_InheritAttributes();
		MetaModel::Init_AddAttribute(new AttributeExternalKey("vendor", array(
			"targetclass" => 'ThirdParty',
			"allowed_values" => null,
			"sql" => 'vendor',
			"is_null_allowed" => true,
			"on_target_delete" => DEL_AUTO,
			"depends_on" => array() ,
			"display_style" => 'select',
			"always_load_in_tables" => false
		)));
		MetaModel::Init_AddAttribute(new AttributeString("invoice_serial", array(
			"allowed_values" => null,
			"sql" => 'invoice_serial',
			"default_value" => '',
			"is_null_allowed" => false,
			"depends_on" => array() ,
			"always_load_in_tables" => false
		)));
		MetaModel::Init_AddAttribute(new AttributeDate("invoice_date", array(
			"allowed_values" => null,
			"sql" => 'invoice_date',
			"default_value" => '',
			"is_null_allowed" => true,
			"depends_on" => array() ,
			"always_load_in_tables" => false
		)));
		MetaModel::Init_AddAttribute(new AttributeExternalKey("warranty", array(
			"targetclass" => 'Warranty',
			"allowed_values" => null,
			"sql" => 'warranty',
			"is_null_allowed" => true,
			"on_target_delete" => DEL_AUTO,
			"depends_on" => array() ,
			"display_style" => 'select',
			"always_load_in_tables" => false
		)));
		MetaModel::Init_AddAttribute(new AttributeDate("end_of_warranty", array(
			"allowed_values" => null,
			"sql" => 'end_of_warranty',
			"default_value" => '',
			"is_null_allowed" => true,
			"depends_on" => array() ,
			"always_load_in_tables" => true
		)));
		MetaModel::Init_AddAttribute(new AttributeExternalKey("org_id", array(
			"targetclass" => 'Organization',
			"allowed_values" => null,
			"sql" => 'org_id',
			"is_null_allowed" => false,
			"on_target_delete" => DEL_AUTO,
			"depends_on" => array() ,
			"display_style" => 'select',
			"always_load_in_tables" => false
		)));
		MetaModel::Init_AddAttribute(new AttributeExternalField("org_name", array(
			"allowed_values" => null,
			"extkey_attcode" => 'org_id',
			"target_attcode" => 'name',
			"always_load_in_tables" => false
		)));
		MetaModel::Init_AddAttribute(new AttributeExternalKey("caller_id", array(
			"targetclass" => 'Person',
			"allowed_values" => new ValueSetObjects("SELECT Person WHERE org_id = :this->org_id") ,
			"sql" => 'caller_id',
			"is_null_allowed" => true,
			"on_target_delete" => DEL_AUTO,
			"depends_on" => array(
				'org_id'
			) ,
			"display_style" => 'select',
			"always_load_in_tables" => false
		)));
		MetaModel::Init_AddAttribute(new AttributeExternalField("caller_name", array(
			"allowed_values" => null,
			"extkey_attcode" => 'caller_id',
			"target_attcode" => 'name',
			"always_load_in_tables" => false
		)));
		MetaModel::Init_AddAttribute(new AttributeInteger("count", array(
			"allowed_values" => null,
			"sql" => 'count',
			"default_value" => '',
			"is_null_allowed" => false,
			"depends_on" => array() ,
			"always_load_in_tables" => false
		)));
		MetaModel::Init_AddAttribute(new AttributeExternalKey("inventory_id", array(
			"targetclass" => 'Inventory',
			"allowed_values" => new ValueSetObjects("SELECT Inventory") ,
			"sql" => 'inventory_id',
			"is_null_allowed" => false,
			"on_target_delete" => DEL_MANUAL,
			"depends_on" => array() ,
			"display_style" => 'select',
			"always_load_in_tables" => false
		)));
		MetaModel::Init_AddAttribute(new AttributeExternalField("inventory_title", array(
			"allowed_values" => null,
			"extkey_attcode" => 'inventory_id',
			"target_attcode" => 'title',
			"always_load_in_tables" => false
		)));
		MetaModel::Init_AddAttribute(new AttributeExternalKey("inventory_detail_id", array(
			"targetclass" => 'InventoryDetail',
			"allowed_values" => new ValueSetObjects("SELECT InventoryDetail WHERE inventory_id = :this->inventory_id") ,
			"sql" => 'inventory_detail_id',
			"is_null_allowed" => true,
			"on_target_delete" => DEL_AUTO,
			"depends_on" => array(
				'inventory_id'
			) ,
			"display_style" => 'select',
			"always_load_in_tables" => false
		)));
		MetaModel::Init_AddAttribute(new AttributeExternalField("inventory_detail_title", array(
			"allowed_values" => null,
			"extkey_attcode" => 'inventory_detail_id',
			"target_attcode" => 'title',
			"always_load_in_tables" => false
		)));
		MetaModel::Init_AddAttribute(new AttributeLinkedSetIndirect("physical_device_list", array(
			"linked_class" => 'lnkWarehouseDocToPhysicalDevice',
			"ext_key_to_me" => 'warehouse_document_id',
			"ext_key_to_remote" => 'physical_device_id',
			"allowed_values" => null,
			"count_min" => 0,
			"count_max" => 0,
			"duplicates" => false,
			"depends_on" => array() ,
			"always_load_in_tables" => false
		)));
		MetaModel::Init_SetZListItems('details', array(
			'fieldset:WarehouseDocument:baseInfo' => array(
				0 => 'vendor',
				1 => 'invoice_serial',
				2 => 'invoice_date',
				3 => 'warranty',
				4 => 'end_of_warranty',
			) ,
			'fieldset:WarehouseDocument:warehouseInfo' => array(
				0 => 'org_id',
				1 => 'caller_id',
				2 => 'product_category_id',
				3 => 'product_id',
				4 => 'count',
				5 => 'inventory_id',
				6 => 'inventory_detail_id',
			) ,
			0 => 'physical_device_list',
		));
		MetaModel::Init_SetZListItems('standard_search', array(
			0 => 'vendor',
			1 => 'invoice_serial',
			2 => 'invoice_date',
			3 => 'warranty',
			4 => 'end_of_warranty',
			5 => 'org_id',
			6 => 'caller_id',
			7 => 'product_category_id',
			8 => 'product_id',
			9 => 'count',
			10 => 'inventory_id',
			11 => 'inventory_detail_id',
		));
		MetaModel::Init_SetZListItems('list', array(
			0 => 'vendor',
			1 => 'invoice_serial',
			2 => 'invoice_date',
			3 => 'warranty',
			4 => 'end_of_warranty',
			5 => 'product_category_id',
			6 => 'product_id',
			7 => 'count',
			8 => 'inventory_id',
			9 => 'inventory_detail_id',
		));
	}

	protected
	function OnInsert()
	{
		$this->Set('balance', $this->Get('count'));
		$this->Set('created_at', time());
		$iNextId = MetaModel::GetNextKey(get_class($this));
		if ($this->Get('ref') == '')
		{
			$this->Set('ref', 'WD-' . sprintf('%06d', $iNextId));
		}

		parent::OnInsert();
	}

	protected
	function AfterInsert()
	{
		parent::AfterInsert();
		$ci = $this->Get('physical_device_type');
		$ciAtts = Metamodel::ListAttributeDefs($ci);
		$tt = MetaModel::GetZListItems($ci, 'details');
		foreach($tt as $t => $v)
		{
			if (is_array($v))
			{
				foreach($v as $key => $value)
				{
					foreach($value as $subV)
					{
						if (isset($ciAtts[$subV]))
						{
							if (!$ciAtts[$subV]->IsNullAllowed())
							{
								$finalAtts[] = $subV;
							}
						}
					}
				}

				continue;
			}

			if (!is_array($v))
			{
				if (isset($ciAtts[$v]))
				{
					if (!$ciAtts[$v]->IsNullAllowed())
					{
						$finalAtts[] = $v;
					}
				}
			}
		}

		$aList = $finalAtts;
		if ($this->Get('count') <= 20)
		{
			for ($i = 1; $i <= $this->Get('count'); $i++)
			{

				//

				$oNewCi[$i] = MetaModel::NewObject($ci);
				$oNewRel[$i] = MetaModel::NewObject('lnkWarehouseDocToPhysicalDevice');
				foreach($aList as $item)
				{
					if ($item == 'org_id')
					{
						$oNewCi[$i]->Set('org_id', $this->Get('org_id'));
						continue;
					}

					if ($item == 'name')
					{
						$oNewCi[$i]->Set($item, utils::ReadParam('ci_' . $item) . '-' . $i);
						continue;
					}

					$oNewCi[$i]->Set($item, utils::ReadParam('ci_' . $item));
				}

				$oNewCi[$i]->Set('status', 'stock');
				$wdID = $this->Get('id');
				$oNewCi[$i]->Set('warehouse_document_id', $wdID);
				$oNewCi[$i]->Set('product_id', $this->Get('product_id'));
				$oNewCi[$i]->Set('purchase_date', $this->Get('invoice_date'));
				$oNewCi[$i]->Set('end_of_warranty', $this->Get('end_of_warranty'));
				$pdID = $oNewCi[$i]->DBInsertNoReload();
				$oNewRel[$i]->Set('warehouse_document_id', $wdID);
				$oNewRel[$i]->Set('physical_device_id', $pdID);
				$oNewRel[$i]->DBInsertNoReload();
			}
		}
		else
		{
			$root_url = MetaModel::GetConfig()->Get('app_root_url');

			// preparing input data

			$id = $this->Get('id');
			$org_id = $this->Get('org_id');
			foreach($aList as $key)
			{
				$params[$key] = utils::ReadParam('ci_' . $key);
			}

			$jParams = json_encode($params);
			$query = 'id=' . $id;
			$query.= '&org_id=' . $org_id;
			$query.= '&params=' . $jParams;
			/**
			 | sending the input data
			 | to the local queue app
			 | -----------------------
			 */

			// create curl resource

			$ch = curl_init();

			// set url

			curl_setopt($ch, CURLOPT_URL, $root_url . "queue/public/?" . $query);
			$fff = fopen("test_url.php", "w");
			fwrite($fff, ($root_url . "queue/public/?" . $query));
			fclose($fff);

			// return the transfer as a string

			curl_setopt($ch, CURLOPT_RETURNTRANSFER, 0);

			// $output contains the output string

			$output = curl_exec($ch);

			// close curl resource to free up system resources

			curl_close($ch);
		}
	}
}

class CiAssignment extends FunctionalDocument

{
	public static

	function Init()
	{
		$aParams = array(
			'category' => 'bizmodel,searchable',
			'key_type' => 'autoincrement',
			'name_attcode' => array(
				'ref'
			) ,
			'state_attcode' => '',
			'reconc_keys' => array(
				'ref',
				'ticket_id'
			) ,
			'db_table' => 'ci-assignment',
			'db_key_field' => 'id',
			'db_finalclass_field' => '',
		);
		MetaModel::Init_Params($aParams);
		MetaModel::Init_InheritAttributes();
		MetaModel::Init_AddAttribute(new AttributeDate("date", array(
			"allowed_values" => null,
			"sql" => 'date',
			"default_value" => '',
			"is_null_allowed" => true,
			"depends_on" => array() ,
			"always_load_in_tables" => true
		)));
		MetaModel::Init_AddAttribute(new AttributeLinkedSetIndirect("documents", array(
			"linked_class" => 'lnkDocumentToCiAssignment',
			"ext_key_to_me" => 'ci_assignment_id',
			"ext_key_to_remote" => 'document_id',
			"allowed_values" => null,
			"count_min" => 0,
			"count_max" => 0,
			"duplicates" => false,
			"depends_on" => array() ,
			"always_load_in_tables" => false
		)));
		MetaModel::Init_AddAttribute(new AttributeExternalKey("ticket_id", array(
			"targetclass" => 'Ticket',
			"allowed_values" => new ValueSetObjects("SELECT Ticket") ,
			"sql" => 'ticket_id',
			"is_null_allowed" => false,
			"on_target_delete" => DEL_MANUAL,
			"depends_on" => array() ,
			"display_style" => 'select',
			"always_load_in_tables" => false
		)));
		MetaModel::Init_AddAttribute(new AttributeExternalField("caller_id", array(
			"allowed_values" => null,
			"extkey_attcode" => 'ticket_id',
			"target_attcode" => 'caller_id',
			"always_load_in_tables" => false
		)));
		MetaModel::Init_AddAttribute(new AttributeExternalKey("ci_id", array(
			"targetclass" => 'PhysicalDevice',
			"allowed_values" => new ValueSetObjects("SELECT PhysicalDevice WHERE product_id = :this->product_id AND (status = 'stock' OR id=:this->ci_id)") ,
			"sql" => 'ci_id',
			"is_null_allowed" => true,
			"on_target_delete" => DEL_AUTO,
			"depends_on" => array(
				'product_id'
			) ,
			"display_style" => 'select',
			"always_load_in_tables" => false
		)));
		MetaModel::Init_AddAttribute(new AttributeExternalField("ci_name", array(
			"allowed_values" => null,
			"extkey_attcode" => 'ci_id',
			"target_attcode" => 'name',
			"always_load_in_tables" => false
		)));
		MetaModel::Init_AddAttribute(new AttributeExternalKey("ci_2_id", array(
			"targetclass" => 'PhysicalDevice',
			"allowed_values" => new ValueSetObjects("SELECT PhysicalDevice WHERE product_id = :this->product_id AND (status = 'production' OR id=:this->ci_2_id) AND contact_id = :this->caller_id") ,
			"sql" => 'ci_2_id',
			"is_null_allowed" => true,
			"on_target_delete" => DEL_AUTO,
			"depends_on" => array(
				'product_id',
				'caller_id'
			) ,
			"display_style" => 'select',
			"always_load_in_tables" => false
		)));
		MetaModel::Init_AddAttribute(new AttributeExternalField("ci_2_name", array(
			"allowed_values" => null,
			"extkey_attcode" => 'ci_2_id',
			"target_attcode" => 'name',
			"always_load_in_tables" => false
		)));
		MetaModel::Init_AddAttribute(new AttributeText("comment", array(
			"allowed_values" => null,
			"sql" => 'comment',
			"default_value" => '',
			"is_null_allowed" => true,
			"depends_on" => array() ,
			"always_load_in_tables" => false
		)));
		MetaModel::Init_AddAttribute(new AttributeLinkedSetIndirect("physical_device_list", array(
			"linked_class" => 'lnkCiAssignmentToPhysicalDevice',
			"ext_key_to_me" => 'ci_assignment_id',
			"ext_key_to_remote" => 'physical_device_id',
			"allowed_values" => null,
			"count_min" => 0,
			"count_max" => 0,
			"duplicates" => false,
			"depends_on" => array() ,
			"always_load_in_tables" => false
		)));
		MetaModel::Init_SetZListItems('details', array(
			0 => 'documents',
			'col:col1' => array(
				'fieldset:CiAssignment:baseInfo' => array(
					0 => 'date',
					1 => 'ticket_id',
					2 => 'caller_id',
					3 => 'product_category_id',
					4 => 'product_id',
				) ,
			) ,
			'col:col2' => array(
				'fieldset:CiAssignment:delivered_ci' => array(
					0 => 'ci_id',
				) ,
				'fieldset:CiAssignment:returned_ci' => array(
					0 => 'ci_2_id',
					1 => 'comment',
				) ,
			) ,
		));
		MetaModel::Init_SetZListItems('standard_search', array(
			0 => 'ref',
			1 => 'product_category_id',
			2 => 'product_id',
		));
		MetaModel::Init_SetZListItems('list', array(
			0 => 'ref',
			1 => 'product_category_id',
			2 => 'product_id',
		));
	}

	protected
	function OnInsert()
	{
		$iNextId = MetaModel::GetNextKey(get_class($this));
		if ($this->Get('ref') == '')
		{
			$this->Set('ref', 'CA-' . sprintf('%06d', $iNextId));
		}

		if ($this->Get('ci_id') != '')
		{
			$this->Set('balance', '-1');
		}

		if ($this->Get('ci_2_id') != '')
		{
			$oCUD = MetaModel::NewObject('CiUnassignment');
			$oCUD->Set('ci_id', $this->Get('ci_2_id'));
			$oCUD->Set('balance', '1');
			$oCUD->Set('ref', $this->Get('ref'));
			$oCUD->Set('ticket_id', $this->Get('ticket_id'));
			$oCUD->Set('product_category_id', $this->Get('product_category_id'));
			$oCUD->Set('product_id', $this->Get('product_id'));
			$oCUD->DBInsertNoReload();
		}

		parent::OnInsert();
	}

	protected
	function AfterInsert()
	{
		parent::AfterInsert();
		$sCiClass = $this->Get('physical_device_type');
		if ($this->Get('ci_id') != '')
		{
			$iKey = $this->Get('ci_id');
			$oCI = Metamodel::GetObject($sCiClass, $iKey);
			$oCI->Set('status', 'production');
			$oCI->Set('contact_id', $this->Get('caller_id'));
			$oCI->Set('move2production', time());
			$oCI->DBUpdate();
			$oNewRel = MetaModel::NewObject('lnkCiAssignmentToPhysicalDevice');
			$oNewRel->Set('physical_device_id', $this->Get('ci_id'));
			$oNewRel->Set('ci_assignment_id', $this->Get('id'));
			$oNewRel->DBInsertNoReload();
		}

		if ($this->Get('ci_2_id') != '')
		{
			$iKey = $this->Get('ci_2_id');
			$oCI = Metamodel::GetObject($sCiClass, $iKey);
			$oCI->Set('status', 'stock');
			$oCI->Set('contact_id', '');
			$oCI->DBUpdate();
			$oNewRel = MetaModel::NewObject('lnkCiAssignmentToPhysicalDevice');
			$oNewRel->Set('physical_device_id', $this->Get('ci_2_id'));
			$oNewRel->Set('ci_assignment_id', $this->Get('id'));
			$oNewRel->DBInsertNoReload();
		}

		$this->Set('created_at', time());
	}

	protected
	function AfterDelete()
	{
		parent::AfterDelete();
		$sCiClass = $this->Get('physical_device_type');
		if ($this->Get('ci_id') != '')
		{
			$iKey = $this->Get('ci_id');
			$oCI = Metamodel::GetObject($sCiClass, $iKey);
			$oCI->Set('status', 'stock');
			$oCI->DBUpdate();
		}

		if ($this->Get('ci_2_id') != '')
		{
			$iKey = $this->Get('ci_2_id');
			$oCI = Metamodel::GetObject($sCiClass, $iKey);
			$oCI->Set('status', 'production');
			$oCI->DBUpdate();
		}
	}

	public

	function UpdateObjectFromPostedForm($sFormPrefix = '', $aAttList = null, $aAttFlags = array())
	{
		$sCiClass = $this->Get('physical_device_type');
		$iKey = $this->Get('ci_id');
		if ($sCiClass != '')
		{
			$oCI = Metamodel::GetObject($sCiClass, $iKey);
			$oCI->Set('status', 'stock');
			$oCI->DBUpdate();
		}

		parent::UpdateObjectFromPostedForm();
	}

	protected
	function AfterUpdate()
	{
		parent::AfterUpdate();
		$sCiClass = $this->Get('physical_device_type');
		$iKey = $this->Get('ci_id');
		$oCI = Metamodel::GetObject($sCiClass, $iKey);
		$oCI->Set('status', 'production');
		$oCI->DBUpdate();
	}
}

class CiUnassignment extends FunctionalDocument

{
	public static

	function Init()
	{
		$aParams = array(
			'category' => 'bizmodel',
			'key_type' => 'autoincrement',
			'name_attcode' => array(
				'ref'
			) ,
			'state_attcode' => '',
			'reconc_keys' => array(
				'ref',
				'ticket_id'
			) ,
			'db_table' => 'ci-unassignment',
			'db_key_field' => 'id',
			'db_finalclass_field' => '',
		);
		MetaModel::Init_Params($aParams);
		MetaModel::Init_InheritAttributes();
		MetaModel::Init_AddAttribute(new AttributeExternalKey("ticket_id", array(
			"targetclass" => 'Ticket',
			"allowed_values" => new ValueSetObjects("SELECT Ticket") ,
			"sql" => 'ticket_id',
			"is_null_allowed" => false,
			"on_target_delete" => DEL_MANUAL,
			"depends_on" => array() ,
			"display_style" => 'select',
			"always_load_in_tables" => false
		)));
		MetaModel::Init_AddAttribute(new AttributeExternalField("caller_id", array(
			"allowed_values" => null,
			"extkey_attcode" => 'ticket_id',
			"target_attcode" => 'caller_id',
			"always_load_in_tables" => false
		)));
		MetaModel::Init_AddAttribute(new AttributeExternalKey("ci_id", array(
			"targetclass" => 'PhysicalDevice',
			"allowed_values" => new ValueSetObjects("SELECT PhysicalDevice WHERE product_id = :this->product_id AND (status = 'stock' OR id=:this->ci_id)") ,
			"sql" => 'ci_id',
			"is_null_allowed" => true,
			"on_target_delete" => DEL_AUTO,
			"depends_on" => array(
				'product_id'
			) ,
			"display_style" => 'select',
			"always_load_in_tables" => false
		)));
		MetaModel::Init_AddAttribute(new AttributeExternalField("ci_name", array(
			"allowed_values" => null,
			"extkey_attcode" => 'ci_id',
			"target_attcode" => 'name',
			"always_load_in_tables" => false
		)));
		MetaModel::Init_SetZListItems('details', array(
			0 => 'ref',
		));
		MetaModel::Init_SetZListItems('standard_search', array(
			0 => 'ref',
		));
		MetaModel::Init_SetZListItems('list', array(
			0 => 'ref',
		));
	}
}

class lnkCiAssignmentToPhysicalDevice extends cmdbAbstractObject

{
	public static

	function Init()
	{
		$aParams = array(
			'category' => 'bizmodel',
			'key_type' => 'autoincrement',
			'is_link' => true,
			'name_attcode' => array(
				'physical_device_id',
				'ci_assignment_id'
			) ,
			'state_attcode' => '',
			'reconc_keys' => array(
				'physical_device_id',
				'ci_assignment_id'
			) ,
			'db_table' => 'lnkciassignmenttophysicaldevice',
			'db_key_field' => 'id',
			'db_finalclass_field' => '',
		);
		MetaModel::Init_Params($aParams);
		MetaModel::Init_InheritAttributes();
		MetaModel::Init_AddAttribute(new AttributeExternalKey("ci_assignment_id", array(
			"targetclass" => 'CiAssignment',
			"allowed_values" => null,
			"sql" => 'ci_assignment_id',
			"is_null_allowed" => true,
			"on_target_delete" => DEL_AUTO,
			"depends_on" => array() ,
			"display_style" => 'select',
			"always_load_in_tables" => false
		)));
		MetaModel::Init_AddAttribute(new AttributeExternalKey("physical_device_id", array(
			"targetclass" => 'PhysicalDevice',
			"allowed_values" => null,
			"sql" => 'physical_device_id',
			"is_null_allowed" => true,
			"on_target_delete" => DEL_AUTO,
			"depends_on" => array() ,
			"display_style" => 'select',
			"always_load_in_tables" => false
		)));
		MetaModel::Init_SetZListItems('details', array(
			0 => 'ci_assignment_id',
			1 => 'physical_device_id',
		));
		MetaModel::Init_SetZListItems('standard_search', array(
			0 => 'ci_assignment_id',
			1 => 'physical_device_id',
		));
		MetaModel::Init_SetZListItems('list', array(
			0 => 'ci_assignment_id',
			1 => 'physical_device_id',
		));
	}
}

class lnkWarehouseDocToPhysicalDevice extends cmdbAbstractObject

{
	public static

	function Init()
	{
		$aParams = array(
			'category' => 'bizmodel',
			'key_type' => 'autoincrement',
			'is_link' => true,
			'name_attcode' => array(
				'physical_device_id',
				'warehouse_document_id'
			) ,
			'state_attcode' => '',
			'reconc_keys' => array(
				'physical_device_id',
				'warehouse_document_id'
			) ,
			'db_table' => 'lnkwarehousedoctophysicaldevice',
			'db_key_field' => 'id',
			'db_finalclass_field' => '',
		);
		MetaModel::Init_Params($aParams);
		MetaModel::Init_InheritAttributes();
		MetaModel::Init_AddAttribute(new AttributeExternalKey("warehouse_document_id", array(
			"targetclass" => 'WarehouseDocument',
			"allowed_values" => null,
			"sql" => 'warehouse_document_id',
			"is_null_allowed" => false,
			"on_target_delete" => DEL_AUTO,
			"depends_on" => array() ,
			"display_style" => 'select',
			"always_load_in_tables" => false
		)));
		MetaModel::Init_AddAttribute(new AttributeExternalField("warehouse_document_serial", array(
			"allowed_values" => null,
			"extkey_attcode" => 'warehouse_document_id',
			"target_attcode" => 'invoice_serial',
			"always_load_in_tables" => false
		)));
		MetaModel::Init_AddAttribute(new AttributeExternalKey("physical_device_id", array(
			"targetclass" => 'PhysicalDevice',
			"allowed_values" => null,
			"sql" => 'physical_device_id',
			"is_null_allowed" => false,
			"on_target_delete" => DEL_AUTO,
			"depends_on" => array() ,
			"display_style" => 'select',
			"always_load_in_tables" => false
		)));
		MetaModel::Init_AddAttribute(new AttributeExternalField("physical_device_name", array(
			"allowed_values" => null,
			"extkey_attcode" => 'physical_device_id',
			"target_attcode" => 'name',
			"always_load_in_tables" => false
		)));
		MetaModel::Init_SetZListItems('details', array(
			0 => 'warehouse_document_id',
			1 => 'physical_device_id',
		));
		MetaModel::Init_SetZListItems('standard_search', array(
			0 => 'warehouse_document_id',
			1 => 'physical_device_id',
		));
		MetaModel::Init_SetZListItems('list', array(
			0 => 'warehouse_document_id',
			1 => 'physical_device_id',
		));
	}
}

class Warranty extends cmdbAbstractObject

{
	public static

	function Init()
	{
		$aParams = array(
			'category' => 'bizmodel,searchable',
			'key_type' => 'autoincrement',
			'name_attcode' => array(
				'title'
			) ,
			'state_attcode' => '',
			'reconc_keys' => array(
				'title'
			) ,
			'db_table' => 'warranties',
			'db_key_field' => 'id',
			'db_finalclass_field' => '',
		);
		MetaModel::Init_Params($aParams);
		MetaModel::Init_InheritAttributes();
		MetaModel::Init_AddAttribute(new AttributeString("title", array(
			"allowed_values" => null,
			"sql" => 'title',
			"default_value" => '',
			"is_null_allowed" => false,
			"depends_on" => array() ,
			"always_load_in_tables" => false
		)));
		MetaModel::Init_SetZListItems('details', array(
			0 => 'title',
		));
		MetaModel::Init_SetZListItems('standard_search', array(
			0 => 'title',
		));
		MetaModel::Init_SetZListItems('list', array(
			0 => 'title',
		));
	}
}

class lnkDocumentToCiAssignment extends cmdbAbstractObject

{
	public static

	function Init()
	{
		$aParams = array(
			'category' => 'bizmodel',
			'key_type' => 'autoincrement',
			'is_link' => true,
			'name_attcode' => array(
				'ci_assignment_id',
				'document_id'
			) ,
			'state_attcode' => '',
			'reconc_keys' => array(
				'ci_assignment_id',
				'document_id'
			) ,
			'db_table' => 'lnkdocumenttociassignment',
			'db_key_field' => 'id',
			'db_finalclass_field' => '',
		);
		MetaModel::Init_Params($aParams);
		MetaModel::Init_InheritAttributes();
		MetaModel::Init_AddAttribute(new AttributeExternalKey("ci_assignment_id", array(
			"targetclass" => 'CiAssignment',
			"allowed_values" => null,
			"sql" => 'ci_assignment_id',
			"is_null_allowed" => false,
			"on_target_delete" => DEL_AUTO,
			"depends_on" => array() ,
			"display_style" => 'select',
			"always_load_in_tables" => false
		)));
		MetaModel::Init_AddAttribute(new AttributeExternalKey("document_id", array(
			"targetclass" => 'Document',
			"allowed_values" => null,
			"sql" => 'document_id',
			"is_null_allowed" => false,
			"on_target_delete" => DEL_AUTO,
			"depends_on" => array() ,
			"display_style" => 'select',
			"always_load_in_tables" => false
		)));
		MetaModel::Init_SetZListItems('details', array(
			0 => 'ci_assignment_id',
			1 => 'document_id',
		));
		MetaModel::Init_SetZListItems('standard_search', array(
			0 => 'ci_assignment_id',
			1 => 'document_id',
		));
		MetaModel::Init_SetZListItems('list', array(
			0 => 'ci_assignment_id',
			1 => 'document_id',
		));
	}
}

//
// Menus
//

class MenuCreation_suntech_warehouse_mgmt extends ModuleHandlerAPI

{
	public static

	function OnMenuCreation()
	{
		global $__comp_menus__; // ensure that the global variable is indeed global !
		$__comp_menus__['WarehouseMgmt'] = new MenuGroup('WarehouseMgmt', 28, 'ProductCategory', UR_ACTION_READ | UR_ACTION_MODIFY, UR_ALLOWED_YES);
		$__comp_menus__['ProductCategory'] = new OQLMenuNode('ProductCategory', "SELECT ProductCategory", $__comp_menus__['WarehouseMgmt']->GetIndex() , 10, true, null);
		$__comp_menus__['NewProductCategory'] = new NewObjectMenuNode('NewProductCategory', 'ProductCategory', $__comp_menus__['ProductCategory']->GetIndex() , 10);
		$__comp_menus__['SearchProductCategory'] = new SearchMenuNode('SearchProductCategory', 'ProductCategory', $__comp_menus__['ProductCategory']->GetIndex() , 20);
		$__comp_menus__['Product'] = new OQLMenuNode('Product', "SELECT Product", $__comp_menus__['WarehouseMgmt']->GetIndex() , 20, true, null);
		$__comp_menus__['NewProduct'] = new NewObjectMenuNode('NewProduct', 'Product', $__comp_menus__['Product']->GetIndex() , 10);
		$__comp_menus__['SearchProduct'] = new SearchMenuNode('SearchProduct', 'Product', $__comp_menus__['Product']->GetIndex() , 20);
		$__comp_menus__['Inventory'] = new OQLMenuNode('Inventory', "SELECT Inventory", $__comp_menus__['WarehouseMgmt']->GetIndex() , 30, true, null);
		$__comp_menus__['InventoryDetail'] = new OQLMenuNode('InventoryDetail', "SELECT InventoryDetail", $__comp_menus__['WarehouseMgmt']->GetIndex() , 40, true, null);
		$__comp_menus__['WarehouseDocument'] = new OQLMenuNode('WarehouseDocument', "SELECT WarehouseDocument", $__comp_menus__['WarehouseMgmt']->GetIndex() , 50, true, null);
		$__comp_menus__['CiAssignment'] = new OQLMenuNode('CiAssignment', "SELECT CiAssignment", $__comp_menus__['WarehouseMgmt']->GetIndex() , 60, true, null);
		$__comp_menus__['Warehouse:Overview'] = new DashboardMenuNode('Warehouse:Overview', dirname(__FILE__) . '/warehouse_overview_dashboard_menu.xml', $__comp_menus__['WarehouseMgmt']->GetIndex() , 0);
	}
} // class MenuCreation_suntech_warehouse_mgmt
